fsvm_predict <-function(pred_data = pred_data,
                           pred_data_ids = pred_data_ids,
                           mod_file = mod_file,
                           miss_rows = miss_rows,
                           mod_type = c("presence","percent_cover")){

  mod_type<-match.arg(mod_type,c("presence","percent_cover"),serveral.ok =F)

  # Load Model ####
  load(here(file.path("models",folder,mod_type,mod_file)))

  # Refit best model with all the data ####
  attach(RES)
  best_model <- ifelse(mod_type=="presence", BEST$max_AUC_test, BEST$min_RMSE_test)
  method<-ifelse(best_model %in% c("GLM","GBM","GLMNET","RPART","RPART2","TREEBAG","LM"),stringr::str_to_lower(best_model),
                 ifelse(best_model=="RF","ranger",ifelse(best_model=="XGBOOST","xgbtree",ifelse(best_model=="BAGEARTH","bagEarth",
                                                                                                ifelse(best_model=="GLMNET_class","glmnet",NA)))))

  myControlReg<-caret::trainControl(method = "cv", verboseIter = TRUE, savePredictions = TRUE, index = CONTROL$myFolds) #trControl for GLMNET/presence

  #TuneGrids
  grid_glmnetclass<-expand.grid(alpha = 0:1,lambda = seq(0.0001, 1, length = 20)) #presence
  grid_xgboost<-expand.grid(nrounds = 100,max_depth = 6,eta = 0.3,gamma = 0,colsample_bytree = 1,min_child_weight = 1,subsample = 1) #presence

  if(best_model=="GLM" && mod_type=="percent_cover"){
    var <- sym(MODELS$GLM$outcomeName)
    DATA$total <- DATA$total %>% dplyr::mutate(!! var := ifelse(!! var > 1, 1, !! var))
  }

  if(length(best_model)!= 0) {
    #Refit best model
    pred_model <- caret::train(formula(paste(MODELS[[best_model]][["outcomeName"]],"~ .",sep = "")),
                               data = DATA$total[,c(MODELS[[best_model]][["outcomeName"]],DATA$predictorsNames)],
                               method = method,
                               family = if(best_model=="GLM" && mod_type=="percent_cover") binomial(link = "logit") else NULL,
                               tuneLength = ifelse(best_model=="RF" && mod_type=="presence",3,NULL),
                               trControl = ifelse(best_model=="GLMNET" && mod_type=="presence",myControlReg, CONTROL$myControl),
                               metric = ifelse(mod_type=="presence",ifelse(best_model %in% c("GLM","GBM"),"ROC",ifelse(best_model=="GLMNET","RMSE",NULL)),
                                               ifelse(best_model %in% c("LM","GLM","GBM","GLMNET","RF"),"RMSE",NULL)),
                               tuneGrid = if(best_model=="GLMNET_class"){grid_glmnetclass
                               }else if(best_model=="XGBOOST" && mod_type=="presence"){grid_xgboost
                               }else{NULL},
                               preProc = if(best_model %in% c("GLMNET_class","XGBOOST","RPART","RPAR2","TREEBAG","BAGEARTH"))  NULL else c("center","scale"),
                               verbose = ifelse(best_model %in% c("XGBOOST","TREEBAG"),TRUE,FALSE),
                               na.action = ifelse(best_model %in% c("LM","GLM") && mod_type=="percent_cover",na.pass,NULL))
    #Predictions
    predictions_raw<-if(mod_type=="presence") predict(object = pred_model, pred_data, type = 'raw') else NULL
    predictions_prob<-if(mod_type=="presence") predict(object = pred_model, pred_data, type = 'prob') else predict(object = pred_model, pred_data)

    if(length(miss_rows)>1){
      missed_ids <- pred_data_ids[miss_rows]
      ids <- pred_data_ids[-miss_rows]
      pred <- if(mod_type=="percent_cover") data.frame(QuadPoly_ID = c(ids, missed_ids),Prob = c(predictions_prob, rep(NA,length(missed_ids))))
      else data.frame(QuadPoly_ID = c(ids, missed_ids),resent = c(ifelse(predictions_raw == "Yes",1,0), rep(NA,length(missed_ids))), Prob = c(predictions_prob$Yes, rep(NA,length(missed_ids))))

    } else {
      pred <- if(mod_type=="percent cover") data.frame(QuadPoly_ID = pred_data_ids,Prob = predictions_prob)
      else data.frame(QuadPoly_ID = pred_data_ids, Present = ifelse(predictions_raw == "Yes",1,0), Prob = predictions_prob$Yes)
    }
    return(list(pred_model = pred_model, pred = pred, best_model = best_model))
  } else {
    return(list(pred_model = NULL, pred = NULL, best_model = NULL))
  }
}
